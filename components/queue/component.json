{
  "name": "queue",
  "version": "0.0.2",
  "description": "A little helper for asynchronous JavaScript.",
  "keywords": [
    "asynchronous",
    "async",
    "queue"
  ],
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mbostock/queue.git"
  },
  "main": "queue.js",
  "devDependencies": {
    "uglify-js": "1.2.3",
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "./node_modules/vows/bin/vows"
  },
  "gitHead": "a2c1eb2e151db6b8f76e083f8901e8beb993407b",
  "readme": "# queue.js\n\n**Queue.js** is yet another asynchronous helper library for JavaScript. Think of it as a minimalist version of [Async.js](https://github.com/caolan/async) that allows fine-tuning over parallelism. Or, think of it as a version of [TameJs](http://tamejs.org/) that does not use code generation.\n\nFor example, if you wanted to stat two files in parallel:\n\n```js\nqueue()\n    .defer(fs.stat, __dirname + \"/../Makefile\")\n    .defer(fs.stat, __dirname + \"/../package.json\")\n    .await(function(error, results) { console.log(results); });\n```\n\nOr, if you wanted to run a bazillion asynchronous tasks (here represented as an array of closures) serially:\n\n```js\nvar q = queue(1);\ntasks.forEach(function(t) { q.defer(t); });\nq.await(function(error, results) { console.log(\"all done!\"); });\n```\n\nQueue.js can be run inside Node.js or in a browser.\n\n## API Reference\n\n### queue([parallelism])\n\nConstructs a new queue with the specified *parallelism*. If *parallelism* is not specified, the queue has infinite parallelism. Otherwise, *parallelism* is a positive integer. For example, if *parallelism* is 1, then all tasks will be run in series. If *parallelism* is 3, then at most three tasks will be allowed to proceed concurrently; this is useful, for example, when loading resources in a web browser.\n\n### queue.defer(method[, argumentsâ€¦])\n\nAdds the specified *method* to the queue, with any optional *arguments*. The *method* is called with the optional arguments and a final callback argument, which should be called when the task has finished.\n\n### queue.await(callback)\n\nSets the *callback* to be notified when all deferred tasks have finished.\n\n## Callbacks\n\nThe callbacks follow the Node.js convention where the first argument is an optional error object, and the second is used to pass on the result of an operation.\n",
  "readmeFilename": "README.md",
  "_id": "queue@0.0.2"
}