{
  "name": "LucidJS",
  "description": "LucidJS is an uber simple and easy to use event emitter library. Lucid allows you to create your own event system and even pipe in events from any number of DOM elements.",
  "version": "2.2.1",
  "main": "./lucid.js",
  "keywords": [
    "Event Emitter"
  ],
  "maintainers": [
    {
      "name": "Robert Hurst",
      "email": "RobertWHurst@Gmail.com",
      "url": "http://github.com/RobertWHurst"
    }
  ],
  "bugs": {
    "url": "https://github.com/RobertWHurst/LucidJS/issues"
  },
  "repositories": [
    {
      "type": "git",
      "url": "git@github.com:RobertWHurst/LucidJS.git"
    }
  ],
  "licenses": [
    {
      "name": "BSD License",
      "url": "https://raw.github.com/RobertWHurst/LucidJS/master/license.txt"
    }
  ],
  "homepage": "http://robertwhurst.github.com/LucidJS/",
  "gitHead": "9be24f387e64c90a54422cfd5a4cf717a89b43bc",
  "readme": "#LucidJS\n\n#### Navigation\n* [Set Events](#set-events)\n* [Emitter Piping](#emitter-piping)\n* [DOM Node Augmentation](#dom-node-augmentation)\n* [Sub Events](#sub-events)\n* [Simple Events](#simple-events)\n* [Meta Events](#meta-events)\n* [Documentation](#documentation)\n\t* [Emitter](#emitter)\n\t* [Emitter.on()](#emitter-on)\n\t* [Emitter.off()](#emitter-off)\n\t* [Emitter.once()](#emitter-once)\n\t* [Emitter.trigger()](#emitter-trigger)\n\t* [Emitter.set()](#emitter-set)\n\t* [Emitter.pipe()](#emitter-pipe)\n\t* [Emitter.pipe.clear()](#emitter-pipe-clear)\n\t* [Emitter.listeners()](#emitter-listeners)\n\t* [Emitter.listeners.clear()](#emitter-listeners-clear)\n\n##Decouple components, make them lucid.\n\nLucidJS is an event emitter library  offering several unique features such as set events, emitter piping, DOM node Augmentation, sub events, along with the usual event triggering and binding. LucidJS emitters also feature meta events that allow listening for event binding and event triggering.\n\nIt works with AMD loaders, on NodeJS, and with the good old script tag.\n\n<a name=\"set-events\"></a>\n###Set Events\n\nLucidJS emitters have a method called `.set()`. Set allows you to bind to an event even after it has happened.\n\n```javascript\nvar emitter = LucidJS.emitter();\nemitter.set('ready');\nconsole.log('fired ready event');\nsetTimeout(function() {\n\temitter.on('ready', function() {\n\t\tconsole.log('listener bound and executed after ready event');\n\t});\n}, 2000);\n\n>>> fired ready event\n>>> listener bound and executed after ready event\n```\t\nSet is extremely useful for events that only happen once and indicate state. Its the perfect solution for `load`, `complete` or `ready` events.\n\n<a name=\"emitter-piping\"></a>\n###Emitter Piping\n\nSometimes its nice to have a collection of emitters and a central emitter to aggregate them. This is possible with LucidJS emitters.\n\n```javascript\nvar centralEmitter = LucidJS.emitter();\nvar emitterA = LucidJS.emitter();\nvar emitterB = LucidJS.emitter();\nvar emitterC = LucidJS.emitter();\n\n//pipe the foo event from emitter A\ncentralEmitter.pipe('foo', emitterA);\n\n//pipe the bar and baz event from emitter B\ncentralEmitter.pipe(['bar', 'baz'], emitterB);\n\n//pipe all events from emitter C\ncentralEmitter.pipe(emitterC);\n```\n\t\n<a name=\"dom-node-augmentation\"></a>\n###DOM Node Augmentation\n\nIn the browser you may listen to the events emitted by DOM nodes using LucidJS's emitter API.\n\n```javascript\nvar button = document.getElementByID('button');\nLucidJS.emitter(button);\nbutton.on('click', function(event) {\n\tconsole.log('the button was clicked');\n\tevent.preventDefault();\n});\n```\n\nAs a side note any object or array can be augmented by passing it into `LucidJS.emitter()`, the emitter constructor. DOM node event capture is just an added bonus.\n\n<a name=\"sub-events\"></a>\n###Sub Events\n\nEver wish you could have events with sub events? LucidJS makes this possible. Trigger an event called `foo.bar.baz` will trigger `foo.bar.baz`, `foo.bar`, and `foo`.\n\n```javascript\nvar emitter = LucidJS.emitter();\nemitter.on('foo.bar', function() {\n\tconsole.log('foo.bar');\n});\nemitter.on('foo', function() {\n\tconsole.log('foo');\n});\nemitter.trigger('foo.bar.baz');\n\n>>> 'foo.bar'\n>>> 'foo'\n```\n\t\n<a name=\"simple-events\"></a>\n###Simple Events\n\nAlong with all the tasty bits above LucidJS emitters are also very good at good old regular event passing.\n\n```javascript\nvar emitter = LucidJS.emitter();\nemitter.on('foo', function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n\tconsole.log([arg1, arg2, arg3, arg4, arg5, arg6, arg7].join(' '));\n});\nemitter.trigger('foo', 'any', 'number', 'of', 'arguments', 'can', 'be', 'passed');\n\n>>> 'any number of arguments can be passed'\n```\n\n<a name=\"meta-events\"></a>\n###Meta Events\n\nLucidJS each emitter also emits a set of meta events that let you listen for new listeners on an emitter.\n\n```javascript\nvar emitter = LucidJS.emitter();\nemitter.on('emitter.listener', function(event, listeners) {\n\tconsole.log('captured listeners', listeners, 'on event ' + event);\n});\nemitter.on('foo', function() { console.log('bar'); });\n\n>>> 'captured listeners' [\n\t\tfunction() { console.log('bar'); }\n\t] 'on event foo'\n```\n\nYou can event listen to all of the events emitted by an emitter.\n\n```javascript\nvar emitter = LucidJS.emitter();\nemitter.on('emitter.event', function(event) {\n\tconsole.log('captured event ' + event);\n});\nemitter.trigger('foo');\n\n>>> 'captured event foo'\n```\n\t\n<a name=\"documentation\"></a>\n##Documentation\n\n<a name=\"emitter\"></a>\n### LucidJS.emitter()\n\n\t\nCreates an event emitter and returns it. If an object is passed in the object is augmented with emitter methods. If a DOM node is passed in it will also be augmented, however any DOM events emitted by the node will also be emitted by the emitter.\n\n#### Arguments\n```javascript\nLucidJS.emitter([object object]) => object emitter\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>object</td>\n\t\t\t<td>Optional. Any object or array you wish to turn into an emitter.</td>\n\t\t\t<td>object</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nLucidJS.emitter([object DOMNode]) => object emitter\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>DOMNode</td>\n\t\t\t<td>Optional. Any DOM node you wish to turn into an emitter.</td>\n\t\t\t<td>object</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n### emitter{}\n```javascript\nemitter\n\ton()\n\tonce()\n\ttrigger()\n\tset()\n\tpipe()\n\t\tclear()\n\tlisteners()\n\t\tclear()\n```\n\nThe emitter object is produced `LucidJS.emitter`. Any objects passed into `LucidJS.emitter` will have all of the above methods attached. The emitter object contains the API for interacting with the emitter.\n\n\n### binding{}\n\n\tbinding\n\t\tclear()\n\nThe binding object is returned by `emitter.on`, `emitter.once`, `emitter.set`, and `emitter.pipe`. Executing `binding.clear()` will destroy the event binding or pipe that the binding was returned from.\n\n<a name=\"emitter-on\"></a>\n### emitter.on()\n\t\nBinds any number of listener callbacks to an event or an array of events. Whenever the given event or events are triggered or set on emitter, the listener callbacks will be executed. Any arguments passed to `trigger()` after the event will be passed into the listener callbacks on execution.\n\nIf any of the listener callbacks return `false`, the `emitter.trigger` or `emitter.set` that fired the event will return false.\nIf the event was from a DOM node and `false` is returned both `event.stopPropigation` and `event.preventDefault` will be called.\n\n`emitter.on` returns a `binding` object that can be used to modify the event binding.\n\n#### Arguments\n```javascript\nemitter.on(string event, function listener[, ...]) => object binding\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that the listener will be bound to.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>listener</td>\n\t\t\t<td>A callback function that will be executed whenever the event given is triggered.</td>\n\t\t\t<td>function</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.on(array events, function listener[, ...]) => object binding\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>events</td>\n\t\t\t<td>An array of event names the listener will be bound to.</td>\n\t\t\t<td>array</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>listener</td>\n\t\t\t<td>A callback function that will be executed whenever the event given is triggered.</td>\n\t\t\t<td>function</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-off\"></a>\n### emitter.off()\n\nClears any given listeners on a given event. This method has been added to allow users familar with jQuery or Backbone to get a quick start with the library. However you are encuraged to use the `binding.clear()` method instead.\n\n### Arguments\n```javascript\nemitter.off(string event, function listener[, ...])\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that the listeners will be removed from.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>listener</td>\n\t\t\t<td>A callback that is already bound to the event. This callback will be removed from the event.</td>\n\t\t\t<td>function</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-once\"></a>\n### emitter.once()\n\nBinds a listener to an event. Acts exactly like `emitter.on` with the exception that once the given event is triggered the binding is automatically cleared. Because of this any listeners bound with `emitter.once` will once fire once.\n\n`emitter.once` returns a `binding` object that can be used to modify the event binding.\n\n#### Arguments\n```javascript\nemitter.once(string event, function listener[, ...]) => object binding\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that the listener will be bound to.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>listener</td>\n\t\t\t<td>A callback function that will be executed whenever the event given is triggered.</td>\n\t\t\t<td>function</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.once(array events, function listener[, ...]) => object binding\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>events</td>\n\t\t\t<td>An array of event names the listener will be bound to.</td>\n\t\t\t<td>array</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>listener</td>\n\t\t\t<td>A callback function that will be executed whenever the event given is triggered.</td>\n\t\t\t<td>function</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-trigger\"></a>\n### emitter.trigger()\n\nTriggers an event or an array of events on the emitter. Any listeners bound with `emitter.on` or `emitter.once` will be executed. Any additional arguments passed into `emitter.trigger` excluding the first argument; the event, will be passed to any and all listeners bound to the emitter.\n\nIf any listeners triggered explicitly return `false` then `emitter.trigger` will return false as well.\n\n#### Arguments\n```javascript\nemitter.trigger(string event, * arg[, ...]) => bool successful\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that will be triggered.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>arg</td>\n\t\t\t<td>Any argument to be passed into listeners of the event.</td>\n\t\t\t<td>*</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.trigger(array events, * arg[, ...]) => bool successful\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>events</td>\n\t\t\t<td>An array of event names that will be triggered.</td>\n\t\t\t<td>array</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>arg</td>\n\t\t\t<td>Any argument to be passed into listeners of the event.</td>\n\t\t\t<td>*</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-set\"></a>\n### emitter.set()\n\nWorks like trigger except that any listeners bound to the event or events after `emitter.set` is called will be fired as soon as they are bound. This is great of events that only happen once such as a `load` event. It prevents your listeners from missing an event because it has already fired prior to binding them.\n\n#### Arguments\n```javascript\nemitter.set(string event, * arg[, ...]) => bool successful\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that will be set.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>arg</td>\n\t\t\t<td>Any argument to be passed into listeners of the event.</td>\n\t\t\t<td>*</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.set(array events, * arg[, ...]) => bool successful\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>events</td>\n\t\t\t<td>An array of event names that will be set.</td>\n\t\t\t<td>array</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>arg</td>\n\t\t\t<td>Any argument to be passed into listeners of the event.</td>\n\t\t\t<td>*</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-pipe\"></a>\n### emitter.pipe()\n\t\nPipes all events or select events from one or more emitters, into another. Any events emitted by the piped emitters will also be emitted by the emitter pipe was called on. This is extremely powerful and allows you to chain your emitters.\n\nReturns a pipe object that can be used to clear the pipe.\n\n#### Arguments\n```javascript\nemitter.pipe(object emitter[, ...]) => object pipe\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>emitter</td>\n\t\t\t<td>The emitter that events will be piped from.</td>\n\t\t\t<td>object</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.pipe(string event, object emitter[, ...]) => object pipe\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>The name of the event that will be piped.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>emitter</td>\n\t\t\t<td>The emitter that events will be piped from.</td>\n\t\t\t<td>object</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```javascript\nemitter.pipe(array events, object emitter[, ...]) => object pipe\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>events</td>\n\t\t\t<td>An array of event names that will be piped.</td>\n\t\t\t<td>array</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>emitter</td>\n\t\t\t<td>The emitter that events will be piped from.</td>\n\t\t\t<td>object</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-pipe-clear\"></a>\n### emitter.pipe.clear()\n\t\nAllows clearing all pipes, or pipes that transport select events. If an event name is given, only listeners bound to that event will be cleared. If no event name is given all bound listeners will be cleared.\n\n#### Arguments\n```javascript\nemitter.pipe.clear(string event)\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>Optional. If any pipes are transporting this event they will be cleared.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-listeners\"></a>\n### emitter.listeners()\n\t\nAllows access to the emitter's bound event listeners.\n\nIf an event name is given, the array of listeners bound to the named event will be returned. If no event name is given then the events will be returned. The events object contains all event arrays.\n\nDirectly editing the listeners array is not recommended, however it may be necessary to achieve certain types of functionally in specific cases.\n\n#### Arguments\n```javascript\nemitter.listeners([string event]) => object eventlisteners\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>Optional. The name of the event to expose. The listeners bound the the event will be returned.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<a name=\"emitter-listeners-clear\"></a>\n### emitter.listeners.clear()\n\t\nClears listeners bound to the emitter. If an event name is given, only listeners bound to that event will be cleared. If no event name is given all bound listeners will be cleared.\n\n#### Arguments\n```javascript\nemitter.listeners.clear([string event])\n```\n\n<table width=\"100%\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Description</th>\n\t\t\t<th>Allowed Types</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>event</td>\n\t\t\t<td>Optional. The name of the event to clear listeners from.</td>\n\t\t\t<td>string</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n\n##A Foot Note\n\nIf you like my library feel free to use it however you want. If you wish to contribute to LucidJS please feel free to send me a pull request or make your own fork. Commentary is welcome on any of my projects.\n\nCheers and happy coding.\n\n\n",
  "readmeFilename": "readme.md",
  "_id": "lucidjs@2.2.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/RobertWHurst/LucidJS.git"
  }
}